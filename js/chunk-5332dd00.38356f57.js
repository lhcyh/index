(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5332dd00"],{"0349":function(t,e,i){t.exports=i.p+"img/2-3.5ac62cc4.gif"},"2c30":function(t,e,i){t.exports=i.p+"img/3-1.5da3f1ce.png"},"2daa":function(t,e,i){"use strict";i("628b")},4070:function(t,e,i){"use strict";i("83f3")},5457:function(t,e,i){t.exports=i.p+"img/2-2.7a75cb58.png"},"628b":function(t,e,i){},"656d":function(t,e,i){t.exports=i.p+"img/3-3.9e4fd787.png"},"743d":function(t,e,i){t.exports=i.p+"img/2-5.d7dc2a72.png"},"83f3":function(t,e,i){},"87d6":function(t,e,i){"use strict";var r=function(){var t=this,e=t._self._c;return e("div",{staticClass:"model",style:{width:t.width,padding:t.padding}},[e("div",{staticClass:"head"},[e("div",[e("h1",[t._v(t._s(t.title))])]),e("div",[e("h3",[t._v(t._s(t.tag))])])]),e("div",{staticClass:"modelContent"},[t._t("default")],2)])},l=[],n={name:"Model",props:{title:{type:String,default:"title"},tag:{type:String,default:""},width:{type:String,default:"820px"},padding:{type:String,default:"15px"}}},a=n,s=(i("4070"),i("2877")),o=Object(s["a"])(a,r,l,!1,null,"ab8a1042",null);e["a"]=o.exports},9166:function(t,e,i){t.exports=i.p+"img/2-4.99dc6e30.gif"},"94cc":function(t,e,i){t.exports=i.p+"img/3-2.d3c0353c.png"},"9c69":function(t,e,i){t.exports=i.p+"img/2-1.4ffbf619.png"},aa15:function(t,e,i){t.exports=i.p+"img/3-5.347217a2.png"},baba:function(t,e,i){t.exports=i.p+"img/3-4.e24a8660.jpg"},e065:function(t,e,i){t.exports=i.p+"img/2-6.4e387f84.gif"},e872:function(t,e,i){t.exports=i.p+"img/1-1.ec6d501f.png"},f6b9:function(t,e,i){"use strict";i.r(e);var r=function(){var t=this,e=t._self._c;return e("div",[e("model",{attrs:{width:"auto",title:"推荐布局",tag:"Flexbox"}},[e("p",[t._v("推荐使用 Flexbox（弹性布局） 布局模式。下面是关于Flexbox布局的介绍。")]),e("p",[t._v("Flexbox 是 flexible box 的简称（注：意思是“灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。")]),e("p",[t._v("它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。与以前布局方式（如 table 布局和浮动元素内嵌块元素）相比，Flexbox 是一个更强大的方式：")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" ● 在不同方向排列元素"),e("br"),t._v(" ● 重新排列元素的显示顺序"),e("br"),t._v(" ● 更改元素的对齐方式"),e("br"),t._v(" ● 动态地将元素装入容器"),e("br")]),e("lh-collapse",[e("div",{attrs:{slot:"title"},slot:"title"},[t._v("基本概念")]),e("p",[t._v('采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。')]),e("lh-img",{attrs:{src:i("e872")}}),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" 在 Flexbox 模型中，有三个核心概念："),e("br"),t._v(" – flex 项（注：也称 flex 子元素），需要布局的元素"),e("br"),t._v(" – flex 容器，其包含 flex 项"),e("br"),t._v(" – 排列方向（direction），这决定了 flex 项的布局方向 ")])],1),e("lh-collapse",[e("div",{attrs:{slot:"title"},slot:"title"},[t._v("容器属性")]),e("lh-img",{attrs:{src:i("9c69"),width:"100%"}}),e("h4",[t._v("flex-direction:")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" ● row（默认值）：主轴为水平方向，起点在左端。"),e("br"),t._v(" ● row-reverse：主轴为水平方向，起点在右端。"),e("br"),t._v(" ● column：主轴为垂直方向，起点在上沿。"),e("br"),t._v(" ● column-reverse：主轴为垂直方向，起点在下沿。 ")]),e("lh-img",{attrs:{src:i("5457"),width:"100%"}}),e("h4",[t._v("flex-wrap:")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" ● nowrap（默认）：不换行。"),e("br"),t._v(" ● wrap：换行，第一行在上方。"),e("br"),t._v(" ● wrap-reverse：换行，第一行在下方。 ")]),e("h4",[t._v("justify-content:")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" ● flex-start（默认值）：左对齐"),e("br"),t._v(" ● flex-end：右对齐"),e("br"),t._v(" ● center： 居中"),e("br"),t._v(" ● space-between：两端对齐，项目之间的间隔都相等。"),e("br"),t._v(" ● space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 ")]),e("lh-img",{attrs:{src:i("0349"),width:"100%"}}),e("h4",[t._v("align-items:")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" ● flex-start：交叉轴的起点对齐。"),e("br"),t._v(" ● flex-end：交叉轴的终点对齐。"),e("br"),t._v(" ● center：交叉轴的中点对齐。"),e("br"),t._v(" ● baseline: 项目的第一行文字的基线对齐。"),e("br"),t._v(" ● stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 ")]),e("lh-img",{attrs:{src:i("9166"),width:"100%"}}),e("h4",[t._v("align-content:")]),e("div",{staticStyle:{"margin-bottom":"15px"}},[t._v(" 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用"),e("br"),t._v(" ● flex-start：与交叉轴的起点对齐。"),e("br"),t._v(" ● flex-end：与交叉轴的终点对齐。"),e("br"),t._v(" ● center：与交叉轴的中点对齐。"),e("br"),t._v(" ● space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。"),e("br"),t._v(" ● space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。"),e("br"),t._v(" ● stretch（默认值）：轴线占满整个交叉轴。 ")]),e("lh-img",{attrs:{src:i("743d"),width:"100%"}}),e("h4",[t._v("结合 justify-content和align-items，看看在 flex-direction 两个不同属性值的作用下，轴心有什么不同：")]),e("lh-img",{attrs:{src:i("e065"),width:"100%"}})],1),e("lh-collapse",[e("div",{attrs:{slot:"title"},slot:"title"},[t._v("项目属性")]),e("lh-img",{attrs:{src:i("2c30"),width:"100%"}}),e("h4",[t._v("order属性：")]),e("lh-img",{attrs:{src:i("94cc"),width:"100%"}}),e("h4",[t._v("flex-grow属性：")]),e("p",[t._v("flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。")]),e("p",[t._v("如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。")]),e("lh-img",{attrs:{src:i("656d"),width:"100%"}}),e("h4",[t._v("flex-shrink属性：")]),e("p",[t._v("flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。")]),e("lh-code-editor",{model:{value:t.code1,callback:function(e){t.code1=e},expression:"code1"}}),e("br"),e("lh-img",{attrs:{src:i("baba"),width:"100%"}}),e("p",[t._v("如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。")]),e("p",[t._v("负值对该属性无效。")]),e("h4",[t._v("align-self属性：")]),e("p",[t._v("align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。")]),e("lh-code-editor",{model:{value:t.code2,callback:function(e){t.code2=e},expression:"code2"}}),e("lh-img",{attrs:{src:i("aa15"),width:"100%"}})],1),e("p",[t._v("需要注意的是，弹性布局默认不改变项目的宽度，但是它默认改变项目的高度。如果项目没有显式指定高度，就将占据容器的所有高度。lhUI 多数组件都没有显式指定高度，所以使用 flex 布局时请将 align-items 的 stretch（默认值）修改为其他值（flex-start | flex-end | center | baseline）。")])],1)],1)},l=[],n=i("87d6"),a={components:{Model:n["a"]},name:"RecommendedLayout",data(){return{code1:".item {\n  flex-shrink: <number>; /* default 1 */\n}",code2:".item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}"}}},s=a,o=(i("2daa"),i("2877")),c=Object(o["a"])(s,r,l,!1,null,"4cb161bd",null);e["default"]=c.exports}}]);
//# sourceMappingURL=chunk-5332dd00.38356f57.js.map